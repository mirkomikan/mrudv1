package info.mik.mrud;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.TaskStackBuilder;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Build;

import static android.app.NotificationManager.IMPORTANCE_DEFAULT;

// AlarmReceiver is a broadcast receiver which listens to broadcasts with action
// android.media.action.DISPLAY_NOTIFICATION. This action is declared in the
// AndroidManifest.xml file, in which we have defined a receiver whose name is
// .AlarmReceiver which points to java class AlarmReceiver. And it has the action
// to which it listens to and a category. The intent-filter helps the receiver to
// filter those broadcasts which it is supposed to listen.

public class AlarmReceiver extends BroadcastReceiver {
    private static final String CHANNEL_ID = "info.mik.mrud.channelId";

    @Override
    public void onReceive(Context context, Intent intent) {
        // An intent is an abstract description of an operation to be performed.
        // It can be used with startActivity to launch an Activity, broadcastIntent
        // to send it to any interested BroadcastReceiver components, and
        // startService(Intent) or bindService(Intent, ServiceConnection, int) to
        // communicate with a background Service.
        Intent notificationIntent = new Intent(context, NotificationActivity.class);

        // TaskStackBuilder provides a backward-compatible way to obey the correct
        // conventions around cross-task navigation on the device's SDK version
        // On devices running Android 3.0 or newer, calls to the startActivities()
        // sending the PendingIntent generated by getPendingIntent(int, int) will
        // construct the synthetic back stack as prescribed.
        TaskStackBuilder stackBuilder = TaskStackBuilder.create(context);
        stackBuilder.addParentStack(NotificationActivity.class);
        stackBuilder.addNextIntent(notificationIntent);

        // A description of an Intent and target action to perform with it.
        // the returned object can be handed to other applications so that
        // they can perform the action you described on your behalf at a later time.
        PendingIntent pendingIntent = stackBuilder.getPendingIntent(0,
                PendingIntent.FLAG_UPDATE_CURRENT);

        // This builder is used to build a Notification object which can be used by
        // NotificationManger to notify the user.
        Notification.Builder builder = new Notification.Builder(context);

        // Let's add the sound to our Notification
        Uri alarmSound = RingtoneManager.getDefaultUri(
                RingtoneManager.TYPE_NOTIFICATION);

        // The Notification object can have an Icon, Text to be displayed in
        // notification and most importantly a PendingIntent which will be used
        // when we will click on the notification.
        Notification notification = builder.setContentTitle("MRU-D Notification")
                .setContentText("New Notification from MRU-D")
                .setTicker("New Notification Alert!")
                .setSmallIcon(R.mipmap.ic_launcher)
                .setSound(alarmSound)
                .setAutoCancel(true)
                .setContentIntent(pendingIntent)
                .build();

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            builder.setChannelId(CHANNEL_ID);
        }

        // NotificationManager will do the job of sending the notification to the user
        NotificationManager notificationManager = (NotificationManager)
                context.getSystemService(Context.NOTIFICATION_SERVICE);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel channel = new NotificationChannel(
                                                CHANNEL_ID,
                                                "MRU-D Notification",
                                                IMPORTANCE_DEFAULT
            );
            notificationManager.createNotificationChannel(channel);
        }

        // And it will take notification as the 2nd argument.
        // First argument to notify function is a notification identifier
        // which should be unique within mobile.
        notificationManager.notify(0, notification);
    }
}
